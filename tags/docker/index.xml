<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Sonia Hamilton - Blog</title>
    <link>http://www.snowfrog.net/tags/docker/</link>
    <description>Recent content in Docker on Sonia Hamilton - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.snowfrog.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dockerfile Images</title>
      <link>http://www.snowfrog.net/2015/07/24/dockerfile-images/</link>
      <pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/07/24/dockerfile-images/</guid>
      <description>&lt;p&gt;My work associate &lt;a href=&#34;https://www.linkedin.com/pub/peter-viertel/0/26b/3a8&#34;&gt;Peter
Viertel&lt;/a&gt; recently gave a
lunchtime brownbag on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A topic that came up - the problems around large Docker base images that
are just copies of full Linux installs eg the Ubuntu image that is used
in many tutorials. Examples of problems: PID 1 (init) not cleaning up
processes correctly, no cron, no logrotate, no syslog, EXEC shells
requiring root access to docker daemon.&lt;/p&gt;

&lt;p&gt;The phusion/baseimage site has good material on the issues (even if
you prefer .rpm over .deb).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://phusion.github.io/baseimage-docker/&#34;&gt;Phusion baseimage-docker overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/phusion/baseimage-docker#readme&#34;&gt;phusion/baseimage-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, Mark van Holsteijn&amp;rsquo;s article on creating small images based off
Docker scratch is good.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.xebia.com/2015/06/30/how-to-create-the-smallest-possible-docker-container-of-any-image/&#34;&gt;Mark van Holsteijn - Create Small Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mvanholsteijn/strip-docker-image&#34;&gt;mvanholsteijn/strip-docker-image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dockerfile Notes</title>
      <link>http://www.snowfrog.net/2015/07/13/dockerfile-notes/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/07/13/dockerfile-notes/</guid>
      <description>

&lt;p&gt;Some notes on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;
&lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;commands:62690b4e4e2be0f330c66d76376225a7&#34;&gt;Commands&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MAINTAINER&lt;/code&gt; - author, email, etc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; - base image eg &lt;strong&gt;ubuntu&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt;. Separately, either can be used to
specify the default executable. When both are used, CMD is appended to
ENTRYPOINT to give the container&amp;rsquo;s command line.  Either can be
overridden from &lt;code&gt;docker run&lt;/code&gt; however CMD is easier &amp;ndash; it&amp;rsquo;s just
picks up the remainder of the &lt;code&gt;docker run&lt;/code&gt; command (like
&lt;code&gt;&amp;quot;$*&amp;quot;&lt;/code&gt; for shell scripts) &amp;ndash; allowing a docker image to be thought
of as a &amp;ldquo;wrapped&amp;rdquo; executable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; - install stuff. For dev, separate out &lt;code&gt;RUN&lt;/code&gt; commands,
so layers are cached and builds are faster. For prod, chain &lt;code&gt;RUN&lt;/code&gt;
commands with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt; as multiple RUN commands cause
multiple layers&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; and &lt;code&gt;ADD&lt;/code&gt;. COPY copies file into the
image; ADD does the same but also does things like untar or retrieving
from URL - avoid as behaviour is too overloaded.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;VOLUME&lt;/code&gt; persists a directory to host filesystem under
&lt;code&gt;/var/lib/docker/volumes&lt;/code&gt;; to get the expected behaviour (a
directory shared between host and container) use &lt;code&gt;docker run -v
/var/tmp/foo:/var/tmp/foo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt;, &lt;code&gt;WORKDIR&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt; - environment variables, cwd
and userid for CMD/ENTRYPOINT&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; - expose a network port. Use &lt;code&gt;nn&lt;/code&gt; not &lt;code&gt;nn:mm&lt;/code&gt;
form - allow user to specify ublic port using &lt;code&gt;-p&lt;/code&gt; option.
EXPOSE&amp;rsquo;d ports can be automatically mapped using &lt;code&gt;-P&lt;/code&gt; option.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;build-run-exec:62690b4e4e2be0f330c66d76376225a7&#34;&gt;Build, Run, Exec&lt;/h1&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# build the image &amp;amp; tag it; use current dir as context&lt;/span&gt;
docker build -t&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;soniah/foo:1.0&amp;quot;&lt;/span&gt; .
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# run, automap ports. For dev, omit -D -- stdout is tailed and&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# container is automatically stopped on ctrl-c.&lt;/span&gt;
docker run -P sonia/foo
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# get an interactive shell&lt;/span&gt;
docker &lt;span style=&#34;color: #336666&#34;&gt;exec&lt;/span&gt; -it random_name bash
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# remove all old images, except ubuntu &amp;quot;base&amp;quot; images&lt;/span&gt;
docker rmi -f &lt;span style=&#34;color: #CC3300&#34;&gt;`&lt;/span&gt;docker images | tail -n +2 | grep -v &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;ubuntu&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;print $3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# remove all containers, including stopped containers&lt;/span&gt;
docker rm -f &lt;span style=&#34;color: #CC3300&#34;&gt;`&lt;/span&gt;docker ps --no-trunc -aq&lt;span style=&#34;color: #CC3300&#34;&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;see-also:62690b4e4e2be0f330c66d76376225a7&#34;&gt;See also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://crosbymichael.com/dockerfile-best-practices.html&#34;&gt;Dockerfile Best Practices - MCrosby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/articles/dockerfile_best-practices/&#34;&gt;Dockerfile Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.centurylinklabs.com/dockerfile-entrypoint-vs-cmd/&#34;&gt;Dockerfile: ENTRYPOINT vs CMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.centurylinklabs.com/dockerfile-add-vs-copy/&#34;&gt;Dockerfile: ADD vs COPY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>