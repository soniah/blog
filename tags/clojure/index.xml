<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on Sonia Hamilton - Blog</title>
    <link>http://www.snowfrog.net/tags/clojure/</link>
    <description>Recent content in Clojure on Sonia Hamilton - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 16 Jul 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.snowfrog.net/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>4Clojure 59 Juxtaposition</title>
      <link>http://www.snowfrog.net/2012/07/16/4clojure-59-juxtaposition/</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2012/07/16/4clojure-59-juxtaposition/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.4clojure.com/problem/59&#34;&gt;4clojure problem 59 Juxtapostion&lt;/a&gt; - here&amp;rsquo;s how I approached the problem (warts and all) in the hope that it helps others who are learning &lt;a href=&#34;http://en.wikipedia.org/wiki/Clojure&#34;&gt;Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A reminder of what the &lt;strong&gt;juxt&lt;/strong&gt; function does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Takes a set of functions and returns a fn that is the juxtaposition
of those fns. The returned fn takes a variable number of args, and
returns a vector containing the result of applying each fn to the
args (left-to-right).
((juxt a b c) x) =&amp;gt; [(a x) (b x) (c x)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem was fairly easy, it just required the &lt;strong&gt;HOF&lt;/strong&gt; (Higher Order Functions) abstraction of thinking of functions as arguments, like any other (numeric, string, &amp;hellip;) argument.&lt;/p&gt;

&lt;p&gt;First of all, I need a function that takes a variable number of arguments (0-n) - standard destructuring:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;myjuxt&lt;/span&gt; [&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;]
&lt;span style=&#34;color: #003333&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don&amp;rsquo;t know what to do with these functions yet, so I&amp;rsquo;ll just loop through using &lt;strong&gt;for&lt;/strong&gt; and return each function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;myjuxt&lt;/span&gt; [&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;]
  (&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;] &lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here you can see the returned list of function objects. Not very useful but a start:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #CC00FF&#34;&gt;myjuxt&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;+ min &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;max&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;core_plus&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;core_min&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;core_max&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The question gives a good hint here: &amp;ldquo;return a new function that takes a variable number of arguments&amp;rdquo;. So do that, using the same destructuring approach for a variable number of arguments:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;myjuxt2&lt;/span&gt; [&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;]
  (&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fn &lt;/span&gt;[&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;]
&lt;span style=&#34;color: #003333&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I want to run each function against these arguments, so I&amp;rsquo;ll use &lt;strong&gt;for&lt;/strong&gt; again:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;myjuxt2&lt;/span&gt; [&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;]
  (&lt;span style=&#34;color: #AA0000; background-color: #FFAAAA&#34;&gt;ƒ&lt;/span&gt; [&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;]
   (&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;] (&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;))))
((&lt;span style=&#34;color: #CC00FF&#34;&gt;myjuxt2&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;+ min &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;max&lt;/span&gt;) &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;user=&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;ClassCastException&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;Cannot&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;cast &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;clojure.lang.ArraySeq&lt;/span&gt;
&lt;span style=&#34;color: #003333&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;java.lang.Number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ouch! But the error message gives a hint - something is seeing an array instead of a number. My three functions want numbers and they&amp;rsquo;re getting arrays - I need &lt;strong&gt;apply&lt;/strong&gt; to &amp;ldquo;strip out&amp;rdquo; the arguments:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;myjuxt2&lt;/span&gt; [&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;]
  (&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fn &lt;/span&gt;[&lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;]
   (&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;fs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;apply &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;))))
((&lt;span style=&#34;color: #CC00FF&#34;&gt;myjuxt2&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;+ min &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;max&lt;/span&gt;) &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;user=&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it works! Looking at the solutions I see that I could&amp;rsquo;ve used &lt;strong&gt;map&lt;/strong&gt; instead of &lt;strong&gt;for&lt;/strong&gt;, and &lt;strong&gt;#()&lt;/strong&gt; instead of &lt;strong&gt;(fn)&lt;/strong&gt;, but they&amp;rsquo;re minor &amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Code_golf&#34;&gt;golfing&lt;/a&gt;&amp;rdquo; details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4clojure 100 Least Common Multiple</title>
      <link>http://www.snowfrog.net/2012/07/05/4clojure-100-least-common-multiple/</link>
      <pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2012/07/05/4clojure-100-least-common-multiple/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.4clojure.com/problem/100&#34;&gt;4clojure problem 100&lt;/a&gt; - calculate the &lt;a href=&#34;http://en.wikipedia.org/wiki/Least_common_multiple&#34;&gt;Least Common Multiple (LCM)&lt;/a&gt; of two or more numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/math/c/b/0/cb0d245e78e328c29095b9522fd16200.png&#34; alt=&#34;LCM Example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I worked it out in the REPL, warts and all&amp;hellip;.&lt;/p&gt;

&lt;p&gt;I first thought about using the meaning of LCM to solve this (as given in Wikipedia), ie for two numbers a and b (eg 4 and 6), find all the multiples of a (an infinite sequence), find all the multiples of b (an infinite sequence), and find the first match. But I was impatient and didn&amp;rsquo;t want to work out how to find the first match between lists, so I decided to use the GCD definition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/math/5/b/3/5b3f3c62dd59cc5594af7b2ece3798fb.png&#34; alt=&#34;LCM from GCD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From there it was just a matter of balancing parentheses (thanks &lt;a href=&#34;http://www.snowfrog.net/2012/06/02/emacs-paredit-notes-for-osx/&#34;&gt;paredit&lt;/a&gt;) by breaking up the problem into stages, starting with calculating the GCD of two numbers:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;gcd&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;]
  (&lt;span style=&#34;color: #CC00FF&#34;&gt;cond&lt;/span&gt;
   (&lt;span style=&#34;color: #336666&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt;
   (&lt;span style=&#34;color: #336666&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;
   (&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;mod&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;))
   (&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;mod&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt;))))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;==&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now get LCM working for two arguments:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;lcm&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;]
  (&lt;span style=&#34;color: #336666&#34;&gt;/ &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;* &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;)))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;lcm&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;==&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now get LCM working for more than two arguments. I remembered seeing multiple arities used to solve other 4clojure problems, so I thought I&amp;rsquo;d use the &lt;a href=&#34;http://blog.darevay.com/2011/08/briefly-the-arity-reduce-pattern-in-clojure/&#34;&gt;Arity-Reduce &amp;ldquo;pattern&amp;rdquo;&lt;/a&gt; (well I&amp;rsquo;m using apply, same idea):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;lcm2&lt;/span&gt;
  ([&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;/ &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;* &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;)))
  ([&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;rest&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;apply &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;lcm2&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;lcm2&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;rest&lt;/span&gt;)))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;lcm2&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;==&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;105&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4clojure doesn&amp;rsquo;t allow &lt;strong&gt;defn&lt;/strong&gt;, so I then used &lt;strong&gt;letfn&lt;/strong&gt; to nest my definition of GCD inside LCM:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;lcm3&lt;/span&gt;
  ([&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;]
     (&lt;span style=&#34;color: #CC00FF&#34;&gt;letfn&lt;/span&gt; [(&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd2&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;]
               (&lt;span style=&#34;color: #CC00FF&#34;&gt;cond&lt;/span&gt;
                (&lt;span style=&#34;color: #336666&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt;
                (&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd2&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;mod&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt;))
                (&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd2&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;mod&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;a&lt;/span&gt;))))]
       (&lt;span style=&#34;color: #336666&#34;&gt;/ &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;* &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;) (&lt;span style=&#34;color: #CC00FF&#34;&gt;gcd2&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;))))
  ([&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;rest&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;apply &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;lcm3&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;lcm3&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;rest&lt;/span&gt;)))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;lcm3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;==&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;105&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So my solution worked, but it wasn&amp;rsquo;t very elegant - Dacquiri wins the prize for that, again :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4clojure 97 Pascal&#39;s Triangle</title>
      <link>http://www.snowfrog.net/2012/06/04/4clojure-97-pascals-triangle/</link>
      <pubDate>Mon, 04 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2012/06/04/4clojure-97-pascals-triangle/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.4clojure.com/&#34;&gt;4clojure&lt;/a&gt; problem 97 &lt;strong&gt;Pascal&amp;rsquo;s Triangle&lt;/strong&gt; - calculate the nth row:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Pascal%27s_triangle_5.svg/250px-Pascal%27s_triangle_5.svg.png&#34; alt=&#34;Pascal&#39;s Triangle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My solution:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;pascal&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;n&lt;/span&gt;]
  (&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)
    [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;]
    (&lt;span style=&#34;color: #336666&#34;&gt;map &lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;apply + &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt;)
      (&lt;span style=&#34;color: #CC00FF&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
        (&lt;span style=&#34;color: #336666&#34;&gt;concat &lt;/span&gt;[&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;] (&lt;span style=&#34;color: #CC00FF&#34;&gt;pascal&lt;/span&gt; (&lt;span style=&#34;color: #336666&#34;&gt;- &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)) [&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;])))))

(&lt;span style=&#34;color: #CC00FF&#34;&gt;pascal&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;user=&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A negative - my solution doesn&amp;rsquo;t use tail recursion; on my laptop it works up to about n = 760:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #CC00FF&#34;&gt;pascal&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;e4&lt;/span&gt;)
&lt;span style=&#34;color: #003333&#34;&gt;user=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;java.lang.StackOverflowError&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;NO_SOURCE_FILE&lt;/span&gt;&lt;span style=&#34;color: #FFCC33&#34;&gt;:0&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>4clojure 63 Group a Sequence</title>
      <link>http://www.snowfrog.net/2012/06/03/4clojure-63-group-a-sequence/</link>
      <pubDate>Sun, 03 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2012/06/03/4clojure-63-group-a-sequence/</guid>
      <description>&lt;p&gt;My first attempt at writing up one of my &lt;a href=&#34;http://www.4clojure.com/&#34;&gt;4clojure&lt;/a&gt; solutions. Problem 63 &amp;ldquo;Group a Sequence&amp;rdquo; requires you to re-implement &lt;strong&gt;group-by&lt;/strong&gt;. As always looking at the source code is cheating :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Given a function f and a sequence s, write a function which returns a map. The keys should be the values of f applied to each item in s. The value at each key should be a vector of corresponding items in the order they appear in s.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #336666&#34;&gt;= &lt;/span&gt;(&lt;span style=&#34;color: #CC00FF&#34;&gt;__&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;]) {&lt;span style=&#34;color: #003333&#34;&gt;false&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color: #003333&#34;&gt;true&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;]})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s how I worked it out in the REPL, warts and all&amp;hellip;&lt;/p&gt;

&lt;p&gt;;; map seems a good start here&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;((&lt;span style=&#34;color: #336666&#34;&gt;map &lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; (false false true true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; so I&amp;rsquo;m getting the values of fn here, I want the inputs too
;; I can&amp;rsquo;t think of a clever way to do this, I&amp;rsquo;ll just use for and list&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;foo&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;:let&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;)]] (&lt;span style=&#34;color: #336666&#34;&gt;list &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;)))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ((false 1) (false 3) (true 6) (true 8))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; the for loop can be tightend up, I don&amp;rsquo;t need the :let&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;foo&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;list &lt;/span&gt;(&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;)))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ((false 1) (false 3) (true 6) (true 8))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; I know I want my results as maps, so use a map instead&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;foo&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] {(&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;}))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ({false 1} {false 3} {true 6} {true 8})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; now I&amp;rsquo;m stuck; how do I moosh the results together?
;; I read thru all the map change fn&amp;rsquo;s in the clj cheatsheet
;; hmmm, merge-with looks promising&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;foo&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;merge-with concat &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] {(&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;})))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ({false 1} {false 3} {true 6} {true 8})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; WTF? same results. Re-RTFM on merge-with. Well, I&amp;rsquo;m going to
;; need vectors in my results to be able to concat them&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;foo&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;merge-with concat &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] {(&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) [&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;]})))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ({false [1]} {false [3]} {true [6]} {true [8]})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; WTF? still not mooshing together. Uh duh, fn signature takes
;; &amp;ldquo;maps&amp;rdquo; not a list. Use the &amp;ldquo;list stripper&amp;rdquo; - apply!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;foo&lt;/span&gt; [&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;apply merge-with concat &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] {(&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) [&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;]})))
(&lt;span style=&#34;color: #CC00FF&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;) [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;])
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; {true (6 8), false (1 3)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; ha, sweetness and light! Remove the defn and submit:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fn &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] (&lt;span style=&#34;color: #336666&#34;&gt;apply merge-with concat &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;xs&lt;/span&gt;] {(&lt;span style=&#34;color: #CC00FF&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) [&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;]})))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;;; look at other&amp;rsquo;s solutions. Dacquiri as usual has a more elegant
;; solution, with a reader macro. What&amp;rsquo;s his golf handicap?!?!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #555555&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;apply merge-with concat &lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;for &lt;/span&gt;[&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;%2&lt;/span&gt;] {(&lt;span style=&#34;color: #CC00FF&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;) [&lt;span style=&#34;color: #003333&#34;&gt;x&lt;/span&gt;]}))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Mooshing&lt;/em&gt; is an advanced programming technique, that can only be used after years of study and practice&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs Paredit Notes for OSX</title>
      <link>http://www.snowfrog.net/2012/06/02/emacs-paredit-notes-for-osx/</link>
      <pubDate>Sat, 02 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2012/06/02/emacs-paredit-notes-for-osx/</guid>
      <description>&lt;p&gt;Some notes on &lt;a href=&#34;http://emacswiki.org/emacs/ParEdit&#34;&gt;Emacs&amp;rsquo; Paredit mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More so I can stop fighting with Paredit and do some &lt;strong&gt;Clojure&lt;/strong&gt; programming than show any expertise - see &lt;a href=&#34;http://www.slideshare.net/mudphone/paredit-preso&#34;&gt;Mudphone&amp;rsquo;s Paredit Preso&lt;/a&gt; for the real deal, as well as &lt;a href=&#34;http://p.hagelb.org/paredit-screencast.html&#34;&gt;hagelb&amp;rsquo;s Paredit screencast notes&lt;/a&gt; and the &lt;a href=&#34;http://www.emacswiki.org/pics/static/PareditCheatsheet.png&#34;&gt;Paredit Cheat Sheet&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;M-(&lt;/strong&gt;  wrap parens around something. Also for { [ &amp;ldquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;M-s&lt;/strong&gt;  remove parens from something&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;M-S-s&lt;/strong&gt;  split sexpr into two&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;M-S-j&lt;/strong&gt;  join sexprs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;C-q ♦&lt;/strong&gt;  just do what I say, dammit! force insert of paren or bracket ♦&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;C-u DEL&lt;/strong&gt;  force delete paren or bracket&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;Barfage and slurpage&amp;rdquo; ie moving parens left and right.  I had some trouble getting this going on OSX, as the terminal doesn&amp;rsquo;t seem to map control key sequences correctly. After modifying emacs (see below), I got these going:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;C-&lt;right&gt;, C-&lt;left&gt;&lt;/strong&gt;  move right paren right or left&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ESC C-&lt;right&gt;, ESC C-&lt;left&gt;&lt;/strong&gt; move left paren right or left&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote this elisp for my &lt;strong&gt;~/.emacs.d/sonia.el&lt;/strong&gt; (I&amp;rsquo;m using &lt;a href=&#34;http://github.com/technomancy/emacs-starter-kit&#34;&gt;Technomancy&amp;rsquo;s Emacs Starter Kit&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #336666&#34;&gt;when &lt;/span&gt;(&lt;span style=&#34;color: #CC00FF&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;system-type&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;darwin&lt;/span&gt;)
  (&lt;span style=&#34;color: #CC00FF&#34;&gt;eval-after-load&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;paredit&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color: #CC00FF&#34;&gt;progn&lt;/span&gt;
       &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; C-left&lt;/span&gt;
       (&lt;span style=&#34;color: #CC00FF&#34;&gt;define-key&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;paredit-mode-map&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;kbd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;M-[ 5 d&amp;quot;&lt;/span&gt;)
                   &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;paredit-forward-barf-sexp&lt;/span&gt;)
       &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; C-right&lt;/span&gt;
       (&lt;span style=&#34;color: #CC00FF&#34;&gt;define-key&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;paredit-mode-map&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;kbd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;M-[ 5 c&amp;quot;&lt;/span&gt;)
                   &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;paredit-forward-slurp-sexp&lt;/span&gt;)
       &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ESC-C-left&lt;/span&gt;
       (&lt;span style=&#34;color: #CC00FF&#34;&gt;define-key&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;paredit-mode-map&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;kbd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ESC M-[ 5 d&amp;quot;&lt;/span&gt;)
                   &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;paredit-backward-slurp-sexp&lt;/span&gt;)
       &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; ESC-C-right&lt;/span&gt;
       (&lt;span style=&#34;color: #CC00FF&#34;&gt;define-key&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;paredit-mode-map&lt;/span&gt; (&lt;span style=&#34;color: #CC00FF&#34;&gt;kbd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ESC M-[ 5 c&amp;quot;&lt;/span&gt;)
                   &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;paredit-backward-barf-sexp&lt;/span&gt;)
     )))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/lisp_cycles.png&#34; alt=&#34;Lisp Parens&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Clojure - my books</title>
      <link>http://www.snowfrog.net/2012/05/11/learning-clojure-my-books/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2012/05/11/learning-clojure-my-books/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with Lisp and now Clojure for a couple of years now. Here&amp;rsquo;s a list of the books I&amp;rsquo;ve read on my journey to Clojure enlightenment (I&amp;rsquo;ve still got a long way to go&amp;hellip;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nostarch.com/sites/default/files/imagecache/product_full/lisp.png&#34; alt=&#34;Land of Lisp&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My first Clojure book wasn&amp;rsquo;t even about Clojure, it was about Lisp! One Sunday afternoon I was lurking in the computer section of a local bookshop (a great way to spend a Sunday afternoon), and came across &lt;a href=&#34;http://nostarch.com/lisp.htm&#34;&gt;Land of Lisp&lt;/a&gt;.  I&amp;rsquo;d heard about Lisp, that &amp;ldquo;obsolete&amp;rdquo; language that used to be used for Artificial Intelligence but who uses it nowadays? Anyway, the cover was colourful and the &lt;a href=&#34;http://www.snowfrog.net/2011/03/27/lisp-and-python/&#34;&gt;cartoons&lt;/a&gt; were great, and before I knew it I&amp;rsquo;d read a couple of chapters and wanted to know about this Lisp stuff and I bought the book.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mitpress.mit.edu/sicp/full-text/book/cover.jpg&#34; alt=&#34;SICP book&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But after reading it for a while and getting sidetracked by Scheme and &lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book.html&#34;&gt;the greatest book every written about programming&lt;/a&gt;, Land of Lisp languished on my bookshelf. The example used in the book (yet another game) didn&amp;rsquo;t relate to my day-to-day use of programming. I was getting lost because I wasn&amp;rsquo;t doing any exercises, and &lt;a href=&#34;http://steve-yegge.blogspot.com.au/2006/04/lisp-is-not-acceptable-lisp.html&#34;&gt;Lisp just didn&amp;rsquo;t seem to be an acceptable Lisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imagery.pragprog.com/products/195/btlang_xlargecover.jpg?1298589937&#34; alt=&#34;Seven Languages in Seven Weeks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pragprog.com/book/btlang/seven-languages-in-seven-weeks&#34;&gt;Seven Languages in Seven Weeks&lt;/a&gt; pointed me towards Erlang, Haskell and Clojure. Ah-hah! Clojure - runs on the JVM (so I can use it machines where I can&amp;rsquo;t/don&amp;rsquo;t want to install stuff, just like JRuby). A modern Lisp with cleaned up syntax that has access to all the Java libraries for doing real world stuff. I&amp;rsquo;m hooked!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://joyofclojure.com/wp-content/uploads/2011/07/joy-of-clojure-cover-239x300.jpg&#34; alt=&#34;The Joy of Clojure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At a &lt;a href=&#34;http://ruby.org.au/&#34;&gt;Ruby on Rails Oceania (RORO)&lt;/a&gt; meetup someone was raving about &lt;a href=&#34;http://www.amazon.com/The-Joy-Clojure-Thinking-Way/dp/1935182641&#34;&gt;The Joy of Clojure&lt;/a&gt;. So I drank from the firehose and my brain exploded and nothing made sense. As &lt;a href=&#34;http://en.wikipedia.org/wiki/Steve_Yegge&#34;&gt;Steve Yegge&lt;/a&gt; (a fellow Googler) says in the intro, &amp;ldquo;you&amp;rsquo;ll learn fast&amp;rdquo; - but only if you&amp;rsquo;re already comfortable with Lisp. The book moves too fast, the explanations are cryptic, and it seems to bounce all over the place. Another book to languish on my book shelf.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.apress.com/media/catalog/product/cache/9/image/9df78eab33525d08d6e5fb8d27136e95/A/9/A9781430272311-3d_11.png&#34; alt=&#34;Practical Clojure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My next book &lt;a href=&#34;http://www.amazon.com/Practical-Clojure-Experts-Voice-Source/dp/1430272317/ref=pd_sim_b_4&#34;&gt;Practical Clojure&lt;/a&gt; was where things started to make sense. It&amp;rsquo;s more directed at beginners and just explains how the language works. But it&amp;rsquo;s a thin book (not enough detail) and some sections just seem to be reprints of the API (function foo does this and here&amp;rsquo;s a 5 line example; function bar does this and here&amp;rsquo;s a 5 line example). No real digging into the how and why of using Clojure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://photo.goodreads.com/books/1328761653l/10883803.jpg&#34; alt=&#34;Clojure Programming&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And onto my favourite Clojure book - &lt;a href=&#34;http://www.clojurebook.com/&#34;&gt;Clojure Programming by Emerick et al&lt;/a&gt;. Like many O&amp;rsquo;Reilly books it&amp;rsquo;s &lt;em&gt;definitive&lt;/em&gt;. Lots of detailed examples, clear explanations, great diagrams, coverage of related areas (eg Clojure for web programming). Example code comparing how you do things in Clojure with other languages (Java, Python, Ruby). This is the book where I&amp;rsquo;ve really started to understand Clojure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ep.yimg.com/ca/I/paulgraham_2202_3475946&#34; alt=&#34;On Lisp&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;m working through the &lt;a href=&#34;http://www.4clojure.com/&#34;&gt;4clojure problem list&lt;/a&gt; (really interesting). Then I&amp;rsquo;ll probably buy some more books from &lt;a href=&#34;http://www.amazon.com/Clojure-Bookshelf/lm/R3LG3ZBZS4GCTH&#34;&gt;The Clojure Bookshelf&lt;/a&gt;. And continue reading Paul Graham&amp;rsquo;s On Lisp (I got it &lt;a href=&#34;http://www.lurklurk.org/onlisp/onlisp.html&#34;&gt;printed through Lulu&lt;/a&gt;). And one day I&amp;rsquo;ll reach enlightenment :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/lisp.jpg&#34; alt=&#34;Lisp&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>