<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Sonia Hamilton - Blog</title>
    <link>http://www.snowfrog.net/categories/linux/</link>
    <description>Recent content in Linux on Sonia Hamilton - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.snowfrog.net/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Haskell Folds</title>
      <link>http://www.snowfrog.net/2015/09/04/haskell-folds/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/09/04/haskell-folds/</guid>
      <description>

&lt;p&gt;Notes on Haskell Folds.&lt;/p&gt;

&lt;h1 id=&#34;foldr:a5bf4925444d0c7b3dca48c3539f5c97&#34;&gt;foldr&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/3/3e/Right-fold-transformation.png&#34; alt=&#34;foldr&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;It is best to think of foldr non-recursively as
simultaneously replacing each (:) in a list by a
given function, and [] by a given value.&amp;rdquo; &amp;ndash;
&lt;a href=&#34;http://www.cs.nott.ac.uk/~gmh/book.html&#34;&gt;Programming in
Haskell&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;foldl:a5bf4925444d0c7b3dca48c3539f5c97&#34;&gt;foldl&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/5/5a/Left-fold-transformation.png&#34; alt=&#34;foldl&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;It is best to think of the behaviour of foldl in
a non-recursive manner, in terms of a left
associative operator ⊕ starting from a given
value.&amp;rdquo; &amp;ndash; &lt;a href=&#34;http://www.cs.nott.ac.uk/~gmh/book.html&#34;&gt;Programming in
Haskell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;((((&lt;/span&gt; z ⊕ x1 &lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; ⊕ x2 &lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; ... ⊕ xn
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;links:a5bf4925444d0c7b3dca48c3539f5c97&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/Fold&#34;&gt;Haskell Wiki - Folds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29&#34;&gt;Wikipedia - Folds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.nott.ac.uk/~gmh/chapter7.ppt&#34;&gt;Programming in Haskell Slides - Chapter 7
Higher Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>awsenv AWS environment config loader</title>
      <link>http://www.snowfrog.net/2015/08/07/awsenv-aws-environment-config-loader/</link>
      <pubDate>Fri, 07 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/08/07/awsenv-aws-environment-config-loader/</guid>
      <description>&lt;p&gt;Today I released &lt;a href=&#34;https://github.com/soniah/awsenv&#34;&gt;soniah/awsenv&lt;/a&gt; - a
small binary for helping load aws environment variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;awsenv&lt;/strong&gt; is a small binary that loads AWS environment variables for an AWS
profile from &lt;strong&gt;~/.aws/credentials&lt;/strong&gt; - useful if you&amp;rsquo;re regularly switching
credentials and using tools like &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;. In
addition to &lt;code&gt;aws_access_key_id&lt;/code&gt; and &lt;code&gt;aws_secret_access_key&lt;/code&gt;, it will also
optionally load settings for &lt;code&gt;aws_keyname&lt;/code&gt; and &lt;code&gt;aws_keypath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The accepted flags can be displayed using &lt;code&gt;-h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% awsenv -h
Usage:
  awsenv [OPTIONS] Profile

Application Options:
  -v, --verbose   Verbose output
  -f, --filename= Credentials file (~/.aws/credentials)

Help Options:
  -h, --help      Show this help message

Arguments:
  Profile
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Useful Go Libraries</title>
      <link>http://www.snowfrog.net/2015/07/27/useful-go-libraries/</link>
      <pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/07/27/useful-go-libraries/</guid>
      <description>

&lt;p&gt;A list of &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; libraries and tools I find useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;fatih/vimgo&lt;/a&gt; - amazing Vim plugin
for Go - auto format and vet code, fix imports, syntax highlighting,
and many other features&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;spf13/viper&lt;/a&gt; - configuration for
apps, using command line flags, ENVIRONMENT, json, etcd/consul. Good for
general devops &amp;lsquo;munging&amp;rsquo; scripts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Jeffail/gabs&#34;&gt;Jeffail/gabs&lt;/a&gt; - provides a dynamic language
approach to JSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34;&gt;mitchellh/mapstructure&lt;/a&gt; -
JSON decoding tools - varying structure, weakly typed fields, squashing arrays&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;spf13/cast&lt;/a&gt; - safe and easy casting
from one type to another in Go - useful for JSON, YAML, etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kr/pretty&#34;&gt;kr/pretty&lt;/a&gt; - pretty printing for Go
values&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/armon/go-metrics&#34;&gt;armon/go-metrics&lt;/a&gt; - for exporting
performance and runtime metrics to external metrics systems (i.e.
statsite, statsd)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ryanuber/columnize&#34;&gt;ryanuber/columnize&lt;/a&gt; - easy
column formatted output for golang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/crypto/ssh/terminal&#34;&gt;package terminal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;support functions for dealing with terminals - raw mode, reading
passwords, foreground colors&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Songmu/prompter&#34;&gt;Songmu/prompter&lt;/a&gt; - utility for
easy prompting - Choose, Password, Prompt, etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gholt/brimtext&#34;&gt;gholt/brimtext&lt;/a&gt; - tools for
working with text - tables, colours, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;snippets:f2ee626a81a6bcb754d53e6312958869&#34;&gt;Snippets&lt;/h1&gt;

&lt;h2 id=&#34;fataliferr-fatalifnotok:f2ee626a81a6bcb754d53e6312958869&#34;&gt;fatalIfErr, fatalIfNotOk&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// from https://github.com/FiloSottile/whosthere&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;fatalIfErr(err&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;log.Fatal(err)&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// example&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;db,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;sql.Open(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;C.MySQL)&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;fatalIfErr(err)&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;fatalIfErr(db.Ping())&lt;/span&gt;

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// also&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;fatalIfNotOk(ok&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;!ok&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;log.Fatal(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;not ok: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;msg)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;runcmd:f2ee626a81a6bcb754d53e6312958869&#34;&gt;runcmd&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// run a command using the shell; no need to split args&lt;/span&gt;
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// from https://stackoverflow.com/questions/6182369/exec-a-shell-command-in-go&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;runcmd(cmd&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;shell&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;shell&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;out,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;exec.Command(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;bash&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;cmd).Output()&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #d0d0d0&#34;&gt;log.Fatal(err)&lt;/span&gt;
            &lt;span style=&#34;color: #24909d&#34;&gt;panic&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;some error found&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;out&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;out,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;exec.Command(cmd).Output()&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;log.Fatal(err)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;out&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerfile Images</title>
      <link>http://www.snowfrog.net/2015/07/24/dockerfile-images/</link>
      <pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/07/24/dockerfile-images/</guid>
      <description>&lt;p&gt;My work associate &lt;a href=&#34;https://www.linkedin.com/pub/peter-viertel/0/26b/3a8&#34;&gt;Peter
Viertel&lt;/a&gt; recently gave a
lunchtime brownbag on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A topic that came up - the problems around large Docker base images that
are just copies of full Linux installs eg the Ubuntu image that is used
in many tutorials. Examples of problems: PID 1 (init) not cleaning up
processes correctly, no cron, no logrotate, no syslog, EXEC shells
requiring root access to docker daemon.&lt;/p&gt;

&lt;p&gt;The phusion/baseimage site has good material on the issues (even if
you prefer .rpm over .deb).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://phusion.github.io/baseimage-docker/&#34;&gt;Phusion baseimage-docker overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/phusion/baseimage-docker#readme&#34;&gt;phusion/baseimage-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, Mark van Holsteijn&amp;rsquo;s article on creating small images based off
Docker scratch is good.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.xebia.com/2015/06/30/how-to-create-the-smallest-possible-docker-container-of-any-image/&#34;&gt;Mark van Holsteijn - Create Small Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mvanholsteijn/strip-docker-image&#34;&gt;mvanholsteijn/strip-docker-image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dockerfile Notes</title>
      <link>http://www.snowfrog.net/2015/07/13/dockerfile-notes/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/07/13/dockerfile-notes/</guid>
      <description>

&lt;p&gt;Some notes on &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;
&lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;commands:62690b4e4e2be0f330c66d76376225a7&#34;&gt;Commands&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MAINTAINER&lt;/code&gt; - author, email, etc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; - base image eg &lt;strong&gt;ubuntu&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt;. Separately, either can be used to
specify the default executable. When both are used, CMD is appended to
ENTRYPOINT to give the container&amp;rsquo;s command line.  Either can be
overridden from &lt;code&gt;docker run&lt;/code&gt; however CMD is easier &amp;ndash; it&amp;rsquo;s just
picks up the remainder of the &lt;code&gt;docker run&lt;/code&gt; command (like
&lt;code&gt;&amp;quot;$*&amp;quot;&lt;/code&gt; for shell scripts) &amp;ndash; allowing a docker image to be thought
of as a &amp;ldquo;wrapped&amp;rdquo; executable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; - install stuff. For dev, separate out &lt;code&gt;RUN&lt;/code&gt; commands,
so layers are cached and builds are faster. For prod, chain &lt;code&gt;RUN&lt;/code&gt;
commands with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt; as multiple RUN commands cause
multiple layers&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; and &lt;code&gt;ADD&lt;/code&gt;. COPY copies file into the
image; ADD does the same but also does things like untar or retrieving
from URL - avoid as behaviour is too overloaded.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;VOLUME&lt;/code&gt; persists a directory to host filesystem under
&lt;code&gt;/var/lib/docker/volumes&lt;/code&gt;; to get the expected behaviour (a
directory shared between host and container) use &lt;code&gt;docker run -v
/var/tmp/foo:/var/tmp/foo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt;, &lt;code&gt;WORKDIR&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt; - environment variables, cwd
and userid for CMD/ENTRYPOINT&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; - expose a network port. Use &lt;code&gt;nn&lt;/code&gt; not &lt;code&gt;nn:mm&lt;/code&gt;
form - allow user to specify ublic port using &lt;code&gt;-p&lt;/code&gt; option.
EXPOSE&amp;rsquo;d ports can be automatically mapped using &lt;code&gt;-P&lt;/code&gt; option.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;build-run-exec:62690b4e4e2be0f330c66d76376225a7&#34;&gt;Build, Run, Exec&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# build the image &amp;amp; tag it; use current dir as context&lt;/span&gt;
docker build -t&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;soniah/foo:1.0&amp;quot;&lt;/span&gt; .
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# run, automap ports. For dev, omit -D -- stdout is tailed and&lt;/span&gt;
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# container is automatically stopped on ctrl-c.&lt;/span&gt;
docker run -P sonia/foo
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# get an interactive shell&lt;/span&gt;
docker &lt;span style=&#34;color: #24909d&#34;&gt;exec&lt;/span&gt; -it random_name bash
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# remove all old images, except ubuntu &amp;quot;base&amp;quot; images&lt;/span&gt;
docker rmi -f &lt;span style=&#34;color: #ed9d13&#34;&gt;`&lt;/span&gt;docker images &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; tail -n +2 &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; grep -v &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;#39;ubuntu&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;#39;print $3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# remove all containers, including stopped containers&lt;/span&gt;
docker rm -f &lt;span style=&#34;color: #ed9d13&#34;&gt;`&lt;/span&gt;docker ps --no-trunc -aq&lt;span style=&#34;color: #ed9d13&#34;&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;see-also:62690b4e4e2be0f330c66d76376225a7&#34;&gt;See also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://crosbymichael.com/dockerfile-best-practices.html&#34;&gt;Dockerfile Best Practices - MCrosby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/articles/dockerfile_best-practices/&#34;&gt;Dockerfile Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.centurylinklabs.com/dockerfile-entrypoint-vs-cmd/&#34;&gt;Dockerfile: ENTRYPOINT vs CMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.centurylinklabs.com/dockerfile-add-vs-copy/&#34;&gt;Dockerfile: ADD vs COPY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AWS ssh keys</title>
      <link>http://www.snowfrog.net/2015/05/29/aws-ssh-keys/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/05/29/aws-ssh-keys/</guid>
      <description>&lt;p&gt;A quick &lt;em&gt;howto&lt;/em&gt; on working with AWS &lt;strong&gt;.pem&lt;/strong&gt; ssh certificates.&lt;/p&gt;

&lt;p&gt;AWS distributes their ssh keys as &lt;strong&gt;.pem&lt;/strong&gt; certificates. The usual process with
working with them is:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;mv ~/Downloads/foo.pem ~/.ssh
chmod &lt;span style=&#34;color: #3677a9&#34;&gt;0600&lt;/span&gt; ~/.ssh/foo.pem
ssh -i ~/.ssh/foo.pem 1.2.3.4 -l ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;However, sometimes it&amp;rsquo;s handy to generate a public key out of the
&lt;strong&gt;.pem&lt;/strong&gt; file, for example to make working with Gnome&amp;rsquo;s
&lt;a href=&#34;http://en.wikipedia.org/wiki/Seahorse_%28software%29&#34;&gt;Seahorse&lt;/a&gt; key
manager easier:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; ~/.ssh
mv foo.pem foo
ssh-keygen -y -f ~/.ssh/foo &amp;gt; ~/.ssh/foo.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eloquent Ruby</title>
      <link>http://www.snowfrog.net/2015/05/28/eloquent-ruby/</link>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/05/28/eloquent-ruby/</guid>
      <description>

&lt;p&gt;My notes on Russ Olsen&amp;rsquo;s excellent book &lt;a href=&#34;http://eloquentruby.com/&#34;&gt;Eloquent
Ruby&lt;/a&gt;. These aren&amp;rsquo;t meant to be full and
complete notes they&amp;rsquo;re just things I want to remember; for more details
see the book.&lt;/p&gt;

&lt;h2 id=&#34;chapter-18-execute-around-with-a-block:7451105976af4d209042d2a3b77cd961&#34;&gt;Chapter 18. Execute Around with a Block&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;Execute Around&lt;/em&gt; to do things before and/or after other blocks of
code eg logging, opening/closing files or databases, etc. Value can be
passed in via parameters, or passed out via &lt;em&gt;yield&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# &amp;amp;block is optional, but helps document function&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #447fcf&#34;&gt;with_logging&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(text,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;amp;block)&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;begin&lt;/span&gt;
    &lt;span style=&#34;color: #24909d&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;&amp;gt;&amp;gt; START:  #{&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# no if, so need a block&lt;/span&gt;
    &lt;span style=&#34;color: #24909d&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;&amp;lt;&amp;lt; END:    #{&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# return result of block - chaining&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;rescue&lt;/span&gt;
    &lt;span style=&#34;color: #24909d&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;-- FAILED: #{&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;raise&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #447fcf&#34;&gt;someFunction&lt;/span&gt;
  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# var1 will be visible inside with_logging - blocks are closures&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;var1&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;#39;something&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# someFunction will return 3 because with_logging returns &amp;#39;result&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;with_logging(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;#39;doing addition&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Another example is &lt;em&gt;yielding for flexible initialization&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #447fcf; text-decoration: underline&#34;&gt;EC2&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825&#34;&gt;attr_accessor&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;:json&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #447fcf&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(cmd)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;`#{&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;}`&lt;/span&gt;
    &lt;span style=&#34;color: #40ffff&#34;&gt;@json&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;.parse(result)&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;yield&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #24909d&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;block_given?&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #d0d0d0&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #6ab825&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;EC2&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;#39;aws ec2 describe-instances&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;|ec2|&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;ec2.json[insertDate]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;.new.strftime(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;).to_s&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell Hole Driven Development</title>
      <link>http://www.snowfrog.net/2015/05/22/haskell-hole-driven-development/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/05/22/haskell-hole-driven-development/</guid>
      <description>&lt;p&gt;I just finished attending the excellent &lt;a href=&#34;http://lambdajam.yowconference.com.au/&#34;&gt;Brisbane YOW! Lambda
Jam&lt;/a&gt;. One of the really useful
things I learned from &lt;a href=&#34;http://blog.tmorris.net/&#34;&gt;Tony Morris&lt;/a&gt; was &amp;ldquo;Hole
Driven Development&amp;rdquo; for Haskell - basically using the type system to
help you write a function.&lt;/p&gt;

&lt;p&gt;Firstly, when writing a function, you can use placeholders that will
allow code to compile (without producing error messages) while you&amp;rsquo;re
working on other parts. The two placeholders are:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;todo&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(or&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;string)&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;hole driven&amp;rdquo; part involves using the underscore to get the
compiler to print types:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #447fcf&#34;&gt;_undefined&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;_x&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;_foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;For example if I used &lt;code&gt;_x&lt;/code&gt; then re-loaded my code in ghci, I would get
output like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;Found&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;hole&lt;/span&gt; &lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;_x&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;’&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;a&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;g2&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(bound&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;GetSetLens&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;.hs&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;312&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;s2&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(bound&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;GetSetLens&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;.hs&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;312&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;g1&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(bound&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;GetSetLens&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;.hs&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;312&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #447fcf&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(bound&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;GetSetLens&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;.hs&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;312&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Showing me that where I had &lt;code&gt;_x&lt;/code&gt; a type &lt;code&gt;a&lt;/code&gt; was expected, and that I already
have functions &lt;code&gt;g2,s2,g1,s1&lt;/code&gt; that consume and produce (curry) given types.&lt;/p&gt;

&lt;p&gt;See also the post and video by Matthew Brecknell &lt;a href=&#34;http://matthew.brecknell.net/post/hole-driven-haskell/&#34;&gt;Hole-driven
Haskell&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Devops and Old Git Branches</title>
      <link>http://www.snowfrog.net/2015/03/25/devops-and-old-git-branches/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/03/25/devops-and-old-git-branches/</guid>
      <description>&lt;p&gt;A guest blog post I wrote on managing git branches when doing devops.&lt;/p&gt;

&lt;p&gt;When doing Devops we all know that using source code control is a “good
thing” — indeed it would be hard to imagine doing Devops without it. But
if you’re using &lt;a href=&#34;http://garylarizza.com/blog/2014/08/31/r10k-plus-directory-environments/&#34;&gt;Puppet and
R10K&lt;/a&gt;
for your configuration management you can end up having hundreds of
old branches lying around — branches like &lt;strong&gt;XYZ-123&lt;/strong&gt;,
&lt;strong&gt;XYZ-123.fixed&lt;/strong&gt;, &lt;strong&gt;XYZ-123.fixed.old&lt;/strong&gt; and so on.&lt;/p&gt;

&lt;p&gt;Which branches to cleanup, which to keep? How to easily cleanup the
old branches?  This article demonstrates some git configurations and
scripts  that make working with hundreds of git branches easier&amp;hellip;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://www.icesystems.com.au/devops-and-old-git-branches/&#34;&gt;Devops and Old Git Branches&lt;/a&gt; to read the full article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SaltStack Ubuntu Hostname</title>
      <link>http://www.snowfrog.net/2015/01/18/saltstack-ubuntu-hostname/</link>
      <pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/01/18/saltstack-ubuntu-hostname/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/states/all/salt.states.network.html&#34;&gt;SaltStack&lt;/a&gt; currently doesn&amp;rsquo;t set the hostname correctly on Debian/Ubuntu. For example, this won&amp;rsquo;t work:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;system:&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;network.system:&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;enabled:&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;True&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;hostname:&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;server1.example.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a little shell script I wrote, to get around this problem:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;% cat set_hostname.sh 
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #40ffff&#34;&gt;hn&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;$1&lt;/span&gt;
hostname &lt;span style=&#34;color: #40ffff&#34;&gt;$hn&lt;/span&gt;
&lt;span style=&#34;color: #24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;$hn&lt;/span&gt; &amp;gt; /etc/hostname
sed -i &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;1s/.*/127.0.0.1 localhost &lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;$hn&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;/&amp;quot;&lt;/span&gt; /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then apply it using cmd.script, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;foo-hostname:&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;cmd.script:&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;source:&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;salt://soe/set_hostname.sh&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;args:&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;foo.bar.com&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;unless:&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;grep -q &amp;quot;foo.bar.com&amp;quot; /etc/hosts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terraform Presentation</title>
      <link>http://www.snowfrog.net/2015/01/13/terraform-presentation/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2015/01/13/terraform-presentation/</guid>
      <description>&lt;p&gt;Here are the slides from my Terrraform presentation at the Sydney Puppet Meetup.&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/43462586&#34;
width=&#34;476&#34; height=&#34;400&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34;
marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Building the development version of Terraform</title>
      <link>http://www.snowfrog.net/2014/12/03/building-the-development-version-of-terraform/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2014/12/03/building-the-development-version-of-terraform/</guid>
      <description>&lt;p&gt;Instructions on how to build the development version of &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First you need to install &lt;a href=&#34;http://en.wikipedia.org/wiki/Go_%28programming_language%29&#34;&gt;Go&lt;/a&gt;, I have a script for this that would be easy to adapt for your needs. It installs Go, but also downloads some common projects (&lt;a href=&#34;https://github.com/jteeuwen/go-bindata&#34;&gt;go-bindata&lt;/a&gt;, &lt;a href=&#34;https://github.com/jteeuwen/go-bindata&#34;&gt;lint&lt;/a&gt;) and my own projects (&lt;a href=&#34;https://github.com/soniah/gosnmp&#34;&gt;gosnmp&lt;/a&gt;, &lt;a href=&#34;https://github.com/soniah/evaler&#34;&gt;evaler&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;## install go&lt;/span&gt;

&lt;span style=&#34;color: #40ffff&#34;&gt;tgz&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;go1.3.3.linux-amd64.tar.gz
&lt;span style=&#34;color: #40ffff&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;https://storage.googleapis.com/golang/&lt;span style=&#34;color: #40ffff&#34;&gt;$tgz&lt;/span&gt;

&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt; -f /var/tmp/&lt;span style=&#34;color: #40ffff&#34;&gt;$tgz&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; /var/tmp
	wget &lt;span style=&#34;color: #40ffff&#34;&gt;$url&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt; -d /usr/local/go &lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
	sudo tar -C /usr/local -xzf /var/tmp/&lt;span style=&#34;color: #40ffff&#34;&gt;$tgz&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;## setup dev directory structure&lt;/span&gt;

mkdir -p ~/go/&lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;sonia,thirdparty&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;bin,pkg,src&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; ~/go/thirdparty/src
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;#---------------------&lt;/span&gt;

&lt;span style=&#34;color: #24909d&#34;&gt;read&lt;/span&gt; -p &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;Install third party repos? (go-bindata, lint)&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;$REPLY&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;~ ^&lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt;Yy&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt; -d github.com/jteeuwen/go-bindata &lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
		go get github.com/jteeuwen/go-bindata/...
		cp ~/go/thirdparty/bin/go-bindata ~/bin
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;

	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt; -d github.com/golang/lint &lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
		go get github.com/golang/lint/golint
		cp ~/go/thirdparty/bin/golint ~/bin
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; ~/go/sonia/src
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;#----------------&lt;/span&gt;

&lt;span style=&#34;color: #24909d&#34;&gt;read&lt;/span&gt; -p &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;Install soniah repos? (gosnmp, evaler)&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;$REPLY&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;~ ^&lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt;Yy&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# do &amp;#39;git clone&amp;#39; not &amp;#39;go get&amp;#39; so origin is writeable&lt;/span&gt;
	&lt;span style=&#34;color: #40ffff&#34;&gt;dir&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;github.com/soniah
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt; -d &lt;span style=&#34;color: #40ffff&#34;&gt;$dir&lt;/span&gt;/evaler &lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
		mkdir -p &lt;span style=&#34;color: #40ffff&#34;&gt;$dir&lt;/span&gt;
		&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;$dir&lt;/span&gt;
		git clone git@github.com:soniah/evaler.git
		&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; -
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;

	&lt;span style=&#34;color: #40ffff&#34;&gt;dir&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;github.com/soniah
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt; -d &lt;span style=&#34;color: #40ffff&#34;&gt;$dir&lt;/span&gt;/gosnmp &lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;then&lt;/span&gt;
		mkdir -p &lt;span style=&#34;color: #40ffff&#34;&gt;$dir&lt;/span&gt;
		&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;$dir&lt;/span&gt;
		git clone git@github.com:soniah/gosnmp.git
		&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; -
	&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A common pattern in Go (which my setup script demonstrates) is to &lt;a href=&#34;http://code.google.com/p/go-wiki/wiki/GOPATH&#34;&gt;split your code from thirdparty code&lt;/a&gt;. This requires configuring your shell (~/.zshrc, ~/.bashrc):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #24909d&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;GOPATH&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;~/go/thirdparty:~/go/sonia
&lt;span style=&#34;color: #24909d&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;GOPATH&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;//://bin:&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;}&lt;/span&gt;/bin:&lt;span style=&#34;color: #40ffff&#34;&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then you need to follow the &lt;a href=&#34;https://github.com/hashicorp/terraform&#34;&gt;Terraform instructions&lt;/a&gt; for building, that is:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; ~/go/thirdparty/src
&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;go get -u github.com/mitchellh/gox
&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; ~/go/thirdparty/src/github.com/hashicorp/terraform
&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;make updatedeps
&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;make dev
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# put the binaries somewhere in your path, eg /usr/local/bin&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;$ &lt;/span&gt;sudo cp bin/terraform* /usr/local/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git and mercurial abort: revision cannot be pushed</title>
      <link>http://www.snowfrog.net/2014/09/29/git-and-mercurial-abort-revision-cannot-be-pushed/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2014/09/29/git-and-mercurial-abort-revision-cannot-be-pushed/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been migrating some repositories from Mercurial to Git; as part of this migration process some users want to keep using Mercurial locally until they have time to learn git.&lt;/p&gt;

&lt;p&gt;First install the &lt;a href=&#34;http://hg-git.github.io/&#34;&gt;hg-git&lt;/a&gt; tools; for example on Ubuntu:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo aptitude install python-setuptools python-dev
sudo easy_install hg-git
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Make sure the following is in your ~/.hgrc:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt;extensions&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;
hgext.bookmarks &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;hggit&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then, in your existing mercurial repository, add a new remote that points to the git repository. For example for a BitBucket repository:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; &amp;lt;mercurial repository&amp;gt;
cat .hg/hgrc
&lt;span style=&#34;color: #d0d0d0&#34;&gt;[&lt;/span&gt;paths&lt;span style=&#34;color: #d0d0d0&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# the original hg repository&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; https://username@abcde.org/foo/barhg
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# the git version (on BitBucket in this case)&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;bbgit&lt;/span&gt;   &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; git+ssh://git@bitbucket.org:foo/bar.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then you can go an &lt;em&gt;hg push bbgit&lt;/em&gt; to push from your local hg repository to the remote git repository.&lt;/p&gt;

&lt;h3 id=&#34;mercurial-abort-revision-cannot-be-pushed:33244ccf98c3384a766b4a593c1bd113&#34;&gt;mercurial abort: revision cannot be pushed&lt;/h3&gt;

&lt;p&gt;You may get the error &lt;em&gt;mercurial abort: revision cannot be pushed since it doesn&amp;rsquo;t have a ref&lt;/em&gt; when pushing from hg to git, or you might notice that your hg work isn&amp;rsquo;t being pushed. The solution here is to reset the hg bookmark for git&amp;rsquo;s master branch:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hg book -f -r tip master
hg push bbgit
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you find yourself doing this regularly, this small shell function (in your ~/.bashrc) will help:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hggitpush &lt;span style=&#34;color: #d0d0d0&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# $1 is hg remote name in hgrc for repo&lt;/span&gt;
   &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# $2 is branch (defaults to master)&lt;/span&gt;
   hg book -f -r tip &lt;span style=&#34;color: #ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;}&lt;/span&gt;
   hg push &lt;span style=&#34;color: #40ffff&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then from your shell you can run commands like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hggitpush bbgit dev
hggitpush foogit      &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# defaults to pushing to master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SaltStack Essential Reading</title>
      <link>http://www.snowfrog.net/2014/09/23/saltstack-essential-reading/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2014/09/23/saltstack-essential-reading/</guid>
      <description>&lt;p&gt;A list of &amp;lsquo;Essential Reading&amp;rsquo; for SaltStack. A collection of useful links, mostly for myself but possibly helpful to others.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.saltstack.com/en/latest/topics/tutorials/starting_states.html&#34;&gt;How Do I Use Salt State&lt;/a&gt;s,  &lt;a href=&#34;http://docs.saltstack.com/en/latest/topics/tutorials/states_pt1.html&#34;&gt;States tutorial&lt;/a&gt; and &lt;a href=&#34;http://docs.saltstack.com/en/latest/topics/tutorials/pillar.html&#34;&gt;Pillar Walkthrough&lt;/a&gt; - the tutorials&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/states/highstate.html&#34;&gt;Highstate data structure definitions&lt;/a&gt; and  &lt;a href=&#34;http://docs.saltstack.com/en/latest/topics/yaml/index.html&#34;&gt;Understanding YAML&lt;/a&gt; - helpful for understanding statefile layout - when to use a colon, as dash, double indents, etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/states/requisites.html&#34;&gt;Requisites and Other Global State Arguments&lt;/a&gt; - do something before something else, restart a service if a file changes, etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/states/all/salt.states.file.html&#34;&gt;salt.states.file&lt;/a&gt; - most config management is going to involve working with files&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/renderers/all/salt.renderers.jinja.html&#34;&gt;salt.renderers.jinja&lt;/a&gt; and &lt;a href=&#34;http://docs.saltstack.com/en/latest/topics/best_practices.html&#34;&gt;Salt Best Practices&lt;/a&gt; - working with Jinja&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup Arduino on Debian</title>
      <link>http://www.snowfrog.net/2014/02/26/setup-arduino-on-debian/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.snowfrog.net/2014/02/26/setup-arduino-on-debian/</guid>
      <description>&lt;p&gt;Some notes on setting up Arduino on Debian.&lt;/p&gt;

&lt;p&gt;Add yourself to the required groups - dialout and tty.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo adduser &lt;span style=&#34;color: #40ffff&#34;&gt;$USER&lt;/span&gt; dialout
sudo adduser &lt;span style=&#34;color: #40ffff&#34;&gt;$USER&lt;/span&gt; tty
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Confirm the port &lt;strong&gt;/dev/ttyUSB0&lt;/strong&gt; is being used by Arduino - tail messages then plug in the Arduino.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo tail -f /var/log/messages

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# you should see something like:&lt;/span&gt;
FTDI USB Serial Device converter now attached to ttyUSB0

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# out of interest, inspect permissions on port&lt;/span&gt;
ls -al /dev/ttyUSB0
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Logout and login (or run a login shell). Confirm permissions.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;zsh -l
id

&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;# you should see something like:&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;groups&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt;1000&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;sonia&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;,5&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;tty&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;,20&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;dialout&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;,...
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Install Arduino pre-requisites.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo aptitude install arduino arduino-core
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If preferred, download the &lt;strong&gt;latest&lt;/strong&gt; Arduino environment, run the shell script to start it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #24909d&#34;&gt;cd&lt;/span&gt; ~/arduino-1.0.5
./arduino&lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Set the serial port (Tools -&amp;gt; Serial Port) to &lt;strong&gt;/dev/ttyUSB0&lt;/strong&gt;. Any problems doing this, edit the serial port setting in  &lt;strong&gt;~/.arduino/preferences.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hello World&lt;/strong&gt; - upload Blink (File -&amp;gt; Examples -&amp;gt; 01.Basics -&amp;gt; Blink) to your Arduino, go crazy with that flashing LED!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>